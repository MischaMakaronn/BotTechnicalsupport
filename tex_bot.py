import types

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
import sqlite3
import os
import datetime as DT
import time
import json

# logfile = str(datetime.date.today()) + '.log' # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ª–æ–≥-—Ñ–∞–π–ª–∞
token = '5937676517:AAEG8U11wayyFFQmbJKi3Y3BdINCzUTIDWs'
admin_id = '734877274'
bot = telebot.TeleBot(token)
PHOTO_DIR = 'photo'
conn = sqlite3.connect('help_teh.db', check_same_thread=False)
markdown = """
    *bold text*
    _italic text_
    [text](URL)
    """

global dish_dict
try :
    with conn :
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM Programs")
        data = cursor.fetchall()  # fetchone
        column_names = [i[1] for i in conn.execute(f"SELECT * FROM Programs")]
        column_ids = [i[0] for i in conn.execute(f"SELECT * FROM Programs")]
        column_dict = dict(zip(column_names, column_ids))
except Exception as e :
    print(e)

try :
    with conn :
        data = conn.execute("SELECT * FROM Programs")
        prog_id = [str(i[0]) for i in conn.execute(f"SELECT * FROM Programs")]
        prog_name = [str(i[1]) for i in conn.execute(f"SELECT * FROM Programs")]

        prog_dict = dict(zip(prog_id, prog_name))
except Exception as e :
    print(e)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é USER-–ø–∞–Ω–µ–ª–∏
Main_inline_keyb = InlineKeyboardMarkup()
Main_inline_keyb.add(InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="menu:pushreg"))
Main_inline_keyb.add(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º", callback_data="menu:txt1"))
Main_inline_keyb.add(InlineKeyboardButton("–ú–æ–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="menu:txt3"))
Main_inline_keyb.add(InlineKeyboardButton("–û –Ω–∞—Å", callback_data="menu:txt2"))
Main_inline_keyb.add(InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="menu:profile"))
Main_inline_keyb.add(InlineKeyboardButton("–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="svyz:colling"))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è ADMIN-–ø–∞–Ω–µ–ª–∏ 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
Admin_keyb_lvl1 = InlineKeyboardMarkup()
Admin_keyb_lvl1.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ûï", callback_data="admin_lvl1:addadmin"))
Admin_keyb_lvl1.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ûñ", callback_data="admin_lvl1:deladmin"))
Admin_keyb_lvl1.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üõ†Ô∏è", callback_data="admin_lvl1:redadmin"))

reviews_admin_keyb = InlineKeyboardMarkup()
reviews_admin_keyb.add((InlineKeyboardButton("–†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏", callback_data="admin:miniadmin")))
reviews_admin_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è ADMIN-–ø–∞–Ω–µ–ª–∏ 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
Admin_keyb_lvl2 = InlineKeyboardMarkup()
Admin_keyb_lvl2.add(InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π ", callback_data="admin_lvl2:admin_prog_rev"))
Admin_keyb_lvl2.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="admin_lvl2:admin_prog_add"))

# """***START –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã START***"""
# def create_keyboard(prog_id):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
#     markup_prog = InlineKeyboardMarkup(row_width=3)
#     markup_prog.add(InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='prog_card:'),
#                     InlineKeyboardButton('+', callback_data='prog_card:plus'),
#                     InlineKeyboardButton("–í –∫–æ—Ä–∑–∏–Ω—É", callback_data="prog_card:basket"),
#                     InlineKeyboardButton('–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏', callback_data=f'prog_card:dish_feedback:{prog_id}'))
#     return markup_prog
# """***END –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã END***"""

#
"""***START –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è START***"""
profile_edit_data = {"–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è" : "edit:name",
                     "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" : "edit:phone_number",
                     "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å" : "edit:adress",
                     "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" : "menu:b1"}


def create_edit_button(dct) :  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    edit_button = telebot.types.InlineKeyboardMarkup()
    for key, value in dct.items() :
        edit_button.add(telebot.types.InlineKeyboardButton(key, callback_data=value))
    return edit_button


"""***END –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è END***"""
#
global field, field_dict
field_dict = {"name" : "–ò–º—è", "phone_number" : "–¢–µ–ª–µ—Ñ–æ–Ω", "adress" : "–ê–¥—Ä–µ—Å"}
field = 'name'
global reg_name, reg_phone_number, reg_adress  # –∑–Ω–∞—á–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞) –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫-–µ –±—É–¥–µ–º –ø–æ—Ç–æ–º –∏–∑–º–µ–Ω—è—Ç—å
reg_name, reg_phone_number, reg_adress = "–£–∫–∞–∑–∞—Ç—å –∏–º—è", "–£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", "–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å"
global reg_field, reg_field_dict
reg_field = "name"  # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
reg_field_dict = {"name" : "–ò–º—è", "phone_number" : "–¢–µ–ª–µ—Ñ–æ–Ω", "adress" : "–ê–¥—Ä–µ—Å"}


def create_registration_keyb() :  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registration_keyb = telebot.types.InlineKeyboardMarkup(row_width=1)
    registration_keyb.add(InlineKeyboardButton(reg_name, callback_data="reg:name"),
                          InlineKeyboardButton(reg_phone_number, callback_data="reg:phone_number"),
                          InlineKeyboardButton(reg_adress, callback_data="reg:adress"),

                          InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\u2705", callback_data="accept:save_all"),
                          InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
    return registration_keyb


# def create_admin_coment_keyb(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
#     AdminReviewProg_inline_keyb = InlineKeyboardMarkup(row_width=4)
#     AdminReviewProg_inline_keyb.add(InlineKeyboardButton("–ù–æ–º–µ—Ä", callback_data="qwerty:qwerty"),
#                                      InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="qwerty:qwerty"),
#                                      InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="qwerty:qwerty"),
#                                      InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="qwerty:qwerty"))  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º –∫–æ–ª–±—ç–∫–æ–º
#     for key, value in dct.items():
#         with conn:
#             current_coment_status = [i[4] for i in conn.execute(f"SELECT * FROM Programs WHERE id = {key}")][0]
#             print(current_coment_status)
#         AdminReviewProg_inline_keyb.add(InlineKeyboardButton(f"{key}.", callback_data=f"edit_coment:coment_{key}"),
#                                          InlineKeyboardButton(f"{value[2]}", callback_data="qwerty:qwerty"),
#                                          InlineKeyboardButton("\u2705", callback_data=f"+edit_coment:++{key}"),
#                                          InlineKeyboardButton("\u274C", callback_data=f"-edit_coment:--{key}"))
#     AdminReviewProg_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
#     AdminReviewProg_inline_keyb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_lvl2:admin_panel"))
#     return AdminReviewProg_inline_keyb
#
global default_dict_add_prog
default_dict_add_prog = {1 : ["–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"],
                         2 : ["–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"],
                         3 : ["–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–î–æ–±–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"],
                         4 : ["–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–£–∫–∞–∂–∏—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"],
                         5 : ["–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏", "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏", "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"]}


def create_admin_addprog_keyb(dct) :  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –ë–î, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    AdminAddProg_inline_keyb = InlineKeyboardMarkup(row_width=2)
    AdminAddProg_inline_keyb.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å:", callback_data="qwerty:qwerty"),
                                 InlineKeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç:",
                                                      callback_data="qwerty:qwerty"))  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º –∫–æ–ª–±—ç–∫–æ–º
    for key, value in dct.items() :
        AdminAddProg_inline_keyb.add(
            InlineKeyboardButton(f"{key}. {value[0]}", callback_data=f"admin_add_new_prog:add_prog_{key}"),
            InlineKeyboardButton(f"{value[1]}", callback_data="qwerty:qwerty"))
    AdminAddProg_inline_keyb.add(InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin_add_dish:save_new_prog"))
    AdminAddProg_inline_keyb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_lvl2:admin_panel"))
    AdminAddProg_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
    return AdminAddProg_inline_keyb


# –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
# def send_to_admin(message) :
#     bot.send_message(chat_id=admin_id, text=message)


#
# @bot.message_handler(content_types=['text'])
# def handle_text(message):
#
#     user_message = message.text
#     send_to_admin(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞–ø–∏—Å–∞–ª: {user_message}')
#     bot.send_message(chat_id=message.chat.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
#     if user_message == "stop":
#         bot.send_message(reply_markup=Main_inline_keyb)


@bot.message_handler(commands=['start'])
def start(message) :
    bot.send_message(message.chat.id, '''–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.
    \n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é''', reply_markup=Main_inline_keyb)
    global user_telegram_id
    user_telegram_id = message.from_user.id
    print(user_telegram_id)


@bot.message_handler(commands=['addadmin'])
def add_admin(message) :
    user_id = message.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn :
        row = [i[1] for i in conn.execute("SELECT * FROM Admins WHERE position = 'admin lvl1'")]
    if user_id not in row :  # –ø—Ä–æ–≤–µ—Ä—è–µ–º id –Ω–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞.\n–ù–µ—Ç –ø—Ä–∞–≤–¥ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=Main_inline_keyb)
    else :  # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –∫–ª–∞–≤—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–æ–π
        bot.send_message(message.chat.id,
                         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å 1 —É—Ä–æ–≤–Ω—è.\n"
                         "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ 2 —É—Ä–æ–≤–Ω—è.", reply_markup=Admin_keyb_lvl1)


@bot.message_handler(commands=['admin'])
def admin_management(message) :
    admin_id = message.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –∞–¥–º–∏–Ω–∞ 2 —É—Ä–æ–≤–Ω—è
    with conn :
        row = [i[1] for i in
               conn.execute("SELECT * FROM Admins WHERE position = 'admin lvl2' OR position = 'admin lvl1'")]
    if admin_id not in row :  # –ø—Ä–æ–≤–µ—Ä—è–µ–º id
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞.\n–ù–µ—Ç –ø—Ä–∞–≤–¥ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=Main_inline_keyb)
    else :  # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –∫–ª–∞–≤—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–æ–π
        bot.send_message(message.chat.id,
                         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å 2 —É—Ä–æ–≤–Ω—è.\n"
                         "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
                         "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã;\n"
                         "- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.", reply_markup=Admin_keyb_lvl2)


@bot.callback_query_handler(func=lambda call : call.data.split(":"))
def query_handler(call) :
    bot.answer_callback_query(callback_query_id=call.id)
    if call.data.split(':')[1] == "qwerty" :  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
        print("qwerty")
    if call.data.split(':')[1] == "txt1" :
        print("—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º")
        global Proga_inline_keyb
        Proga_inline_keyb = InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
        [Proga_inline_keyb.add(InlineKeyboardButton(key, callback_data=f"{key}:{value}")) for key, value in
         column_dict.items()]
        Proga_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É: ", call.message.chat.id, call.message.message_id,
                              reply_markup=Proga_inline_keyb)
    if call.data.split(':')[1] == "b1" :
        bot.edit_message_text("–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", call.message.chat.id, call.message.message_id,
                              reply_markup=Main_inline_keyb)
    if call.data.split(':')[1] == "b2" :
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É", call.message.chat.id, call.message.message_id,
                              reply_markup=Proga_inline_keyb)
    if call.data.split(':')[0] in column_dict :
        print("–ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print(call.data.split(':')[0], call.data.split(':')[1])
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º
        global Sub_inline_keyb
        Sub_inline_keyb = InlineKeyboardMarkup()
        [Sub_inline_keyb.add(InlineKeyboardButton(key, callback_data=f"{key}:{value}")) for key, value in
         column_dict.items() if value == call.data.split(':')[1][1 :]]  # —Ç—É—Ç –Ω–∞–¥–æ –≤—ã–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        Sub_inline_keyb.add(InlineKeyboardButton("–û—Å–æ–±–µ–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="info:work"))
        Sub_inline_keyb.add(InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="info:sett"))
        Sub_inline_keyb.add(InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–π", callback_data="menu:b1"))
        Sub_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        Sub_inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º ", callback_data="menu:b2"))
        bot.edit_message_text("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", call.message.chat.id, call.message.message_id,
                              reply_markup=Sub_inline_keyb)
    if call.data.split(':')[1] == "work" :
        cursor.execute(f"SELECT description From Programs")
        result = cursor.fetchone()
        print(result)
        global Desc_Inline_keyb
        Desc_Inline_keyb = InlineKeyboardMarkup()
        Desc_Inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        Desc_Inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º ", callback_data="menu:b2"))
        # Desc_Inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ",reply_markup= Sub_inline_keyb))
        bot.edit_message_text(result, call.message.chat.id, call.message.message_id, reply_markup=Desc_Inline_keyb)
    if call.data.split(':')[1] == "sett" :
        cursor.execute(f"SELECT settings From Programs")
        result = cursor.fetchone()
        print(result)
        global Sett_Inline_keyb
        Sett_Inline_keyb = InlineKeyboardMarkup()
        Sett_Inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        Sett_Inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º ", callback_data="menu:b2"))
        bot.edit_message_text(result, call.message.chat.id, call.message.message_id, reply_markup=Sett_Inline_keyb)

    """___–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'___"""
    if call.data.split(':')[1] == "txt2" :
        global Reviews_inline_keyb
        Reviews_inline_keyb = InlineKeyboardMarkup()
        Reviews_inline_keyb.add(InlineKeyboardButton("–û—Ç–∑—ã–≤—ã –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ", callback_data="review:r1"))
        Reviews_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        about_restaurant = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è! " \
                           f"–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ä–∞–±–æ—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã." \
                           f" –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ä–∞–±–æ—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã." \
                           f"  –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ. –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! "
        bot.edit_message_text(f"{about_restaurant}", call.message.chat.id, call.message.message_id,
                              parse_mode="Markdown", reply_markup=Reviews_inline_keyb)
    """""""""""""–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""""""""

    #     global field
    #     field = call.data.split(':')[1]
    # if call.data.split(':')[0] == "edit":
    #     bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    #     bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_dict[field]}'.", reply_markup=telebot.types.ForceReply())\

    bot.answer_callback_query(call.id)
    user_id = call.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM Clients WHERE telegram_id = ?", (user_id,))  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥-—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    row = cursor.fetchone()
    if call.data.split(':')[1] == "pushreg" :
        Reg_inline_keyb = InlineKeyboardMarkup()
        Reg_inline_keyb.add(InlineKeyboardButton("–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", callback_data="prereg:reg"))
        Reg_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        bot.edit_message_text("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç-–±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", call.message.chat.id,
                              call.message.message_id,
                              reply_markup=Reg_inline_keyb)
    global reg_name, reg_phone_number, reg_adress  # –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if call.data.split(':')[1] == "reg" :
        with conn :
            conn.execute("INSERT OR IGNORE INTO Clients (name, phone_number, adress, telegram_id) values(?, ?, ?, ?)",
                         (reg_name, reg_phone_number, reg_adress, user_telegram_id))
        conn.commit()
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        bot.edit_message_text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", call.message.chat.id,
                              call.message.message_id, reply_markup=create_registration_keyb())
    if call.data.split(':')[1] in reg_field_dict :
        global reg_field
        global Success_reg_inline_keyb
        reg_field = call.data.split(':')[1]
    if call.data.split(':')[0] == "reg" :
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{reg_field_dict[reg_field]}'.",
                         reply_markup=telebot.types.ForceReply())
    if call.data.split(':')[0] == "accept" :
        with conn :
            conn.execute("INSERT OR IGNORE INTO Clients (name, phone_number, adress, telegram_id) values(?, ?, ?, ?)",
                         (reg_name, reg_phone_number, reg_adress, user_telegram_id))
        conn.commit()
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=Main_inline_keyb)
    # if reg_name != "–£–∫–∞–∑–∞—Ç—å –∏–º—è" and reg_phone_number != "–£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" and len(reg_phone_number) and reg_adress != "–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å":
    #
    #     Success_reg_inline_keyb = InlineKeyboardMarkup()
    #     Success_reg_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
    #                                            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
    #                                            f"–ò–º—è: {reg_name}\n"
    #                                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {reg_phone_number}\n"
    #                                            f"–ê–¥—Ä–µ—Å: {reg_adress}\n\n"
    #                                            f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª–µ–π –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ.",
    #                      reply_markup=Success_reg_inline_keyb)

    # else:
    #     bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=create_registration_keyb())

    """""""""""""–ê–î–ú–ò–ù–ö–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê"""""""""""""
    if call.data.split(':')[1] == "addadmin" :
        add_inline_keyb = InlineKeyboardMarkup()
        add_inline_keyb.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ", callback_data="addm:adminid"))
        add_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚Ü© ", callback_data="addm:backmenu"))
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ", reply_markup=add_inline_keyb)
    if call.data.split(':')[1] == "backmenu" :
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ", reply_markup=Admin_keyb_lvl1)
    if call.data.split(":")[1] == "adminid" :
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ telegram id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                         reply_markup=telebot.types.ForceReply())
    if call.data.split(':')[1] == "r1" :
        mini_admin_keyb = InlineKeyboardMarkup()
        mini_admin_keyb.add(
            InlineKeyboardButton("–æ—Ç–∑—ã–≤—ã", callback_data="addm:reviews"))
        bot.edit_message_text("–æ—Ç–∑—ã–≤—ã", call.message.chat.id, call.message.message_id, reply_markup=reviews_admin_keyb)
    # if call.data.split(":")[1] == "profile" :
    #     with conn :
    #         prof_name = [i[1] for i in conn.execute(f"SELECT * FROM Clients")]
    #         prof_phone_number = [i[2] for i in conn.execute(f"SELECT * FROM Clients")]
    #
    #         bot.send_message(call.message.chat.id, prof_name, prof_phone_number)


print("Ready")
bot.infinity_polling(none_stop=True, interval=0)
